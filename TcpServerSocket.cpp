////////////////////////////////////////////////////////////////////////////////////////////////////
// IpPyProxy
//
// Copyright ©2008 Liam Kirton <liam@int3.ws>
////////////////////////////////////////////////////////////////////////////////////////////////////
// TcpServerSocket.cpp
//
// Created: 27/02/2008
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "TcpServerSocket.h"

#include <iostream>

#include "TcpClientSocket.h"
#include "PyInstance.h"

////////////////////////////////////////////////////////////////////////////////////////////////////

TcpServerSocket::TcpServerSocket(TcpClientSocket *TcpClientSocket) : Socket(),
																	 tcpClientSocket_(TcpClientSocket)
{
	tcpClientSocket_->AddRef();

	socketProtocol_ = IPPROTO_TCP;
	socketType_ = SOCK_STREAM;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

TcpServerSocket::~TcpServerSocket()
{
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////

Socket *TcpServerSocket::OnAccept(SOCKET hSocket)
{
	throw new SocketException(this, "Error: TcpServerSocket::OnAccept() Not Supported.");
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TcpServerSocket::OnConnect()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TcpServerSocket::OnDisconnect()
{
	if(tcpClientSocket_ != NULL)
	{
		tcpClientSocket_->Disconnect();
		tcpClientSocket_->Release();
		tcpClientSocket_ = NULL;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TcpServerSocket::OnReceive(unsigned char *buffer, unsigned int length, unsigned int ip, unsigned short port)
{
	if(tcpClientSocket_ != NULL)
	{
		unsigned char *modifiedBuffer = NULL;
		unsigned int modifiedBufferLength = 0;

		PyInstance::GetInstance()->TcpServerRecv(buffer, length, &modifiedBuffer, &modifiedBufferLength);
		if(modifiedBuffer != NULL)
		{
			tcpClientSocket_->Send(modifiedBuffer, modifiedBufferLength);
			delete [] modifiedBuffer;
		}
		else
		{
			tcpClientSocket_->Send(buffer, length);
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void TcpServerSocket::OnSendCompletion(DWORD dwNumberOfBytes)
{
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////
